{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Opentokix","text":"<p>This site a collection of tools, snippets and resources for developers, platform engineers, SREs, DevOps and related fields.</p>"},{"location":"#tools","title":"Tools","text":"<p>Tools you might find yourself using after reading this documentation is, but not limited to.</p>"},{"location":"#cli-tools","title":"CLI tools","text":"<ul> <li>kubectl</li> <li>helm</li> <li>flux</li> <li>terraform</li> <li>ansible</li> <li>krane/crane</li> <li>zsh</li> <li>brew</li> <li>git</li> <li>mermaid</li> </ul>"},{"location":"#applications","title":"Applications","text":"<ul> <li>gitlab</li> <li>github</li> <li>vscode</li> <li>podman</li> <li>wireguard</li> <li>netbox</li> <li>mattermost</li> <li>slack</li> <li>elastic-stack</li> <li>grafana</li> <li>prometheus</li> <li>alertmanager</li> <li>ZeroSSL/LetsEncrypt</li> <li>certbot</li> </ul>"},{"location":"#systems","title":"Systems","text":"<ul> <li>kubernetes</li> <li>flux</li> <li>argocd</li> <li>netbox</li> <li>public clouds<ul> <li>AWS</li> <li>GCP</li> </ul> </li> <li>private clouds<ul> <li>Openstack</li> <li>Proxmox</li> </ul> </li> </ul>"},{"location":"#desktop","title":"Desktop","text":"<ul> <li>Gimp</li> <li>Blender</li> <li>Fusion360</li> <li>Davinci Resolve</li> <li>OBS Studio</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/21/hello/","title":"Hello","text":"<p>This is a test post</p> <pre><code>print(\"Hello World\")\n</code></pre>"},{"location":"cli/","title":"Cli tools","text":"<p>Cli tools are very powerful and can be used to automate tasks, manage infrastructure, and more.</p>"},{"location":"cli/ansible/","title":"Ansible","text":""},{"location":"cli/ansible/#netbox-inventory","title":"Netbox Inventory","text":"<p>Install from ansible-galaxy: <code>ansible-galaxy collection install netbox.netbox</code></p> inventory.yml<pre><code>plugin: netbox.netbox.nb_inventory\napi_endpoint: https://netbox.domain.tld\nvalidate_certs: True\nconfig_context: False\n# Get token from environment variable\ntoken: \"{{ lookup('ansible.builtin.env', 'NETBOX_TOKEN') }}\"\ndns_name: True\n# This will create automatic groups based on the tags, cluster etc from netbox. These groups can then be used in playbooks..\ngroup_by:\n  - cluster\n  - tags\ndevice_query_filters:\n  - has_primary_ip: True\ncompose:\n  #ansible_network_os: platform.slug\n  ansible_host: name\n  # Add a custom field in netbox under Other/Custom fields/SSH Username\n  ansible_user: custom_fields.ssh_username\n  ansible_ssh_common_args: '-o StrictHostKeyChecking=no'\n</code></pre>"},{"location":"cli/ansible/#test-inventory","title":"Test inventory","text":"<p>Here is an example of how to test the inventory files, this will ping all host that have the tag <code>ssh</code> in netbox. And will also login with the username defined in the custom field <code>ssh_username</code>.</p> <pre><code>ansible -i inventory.yml tags_ssh -m ping\n</code></pre>"},{"location":"cli/ansible/#verbose-inventory","title":"Verbose inventory","text":"<p>To see all the groups that are created from tags, clusters etc. You can run the following command.</p> <pre><code>ansible-inventory -i inventory.yml --list\n</code></pre>"},{"location":"systems/kubernetes/","title":"Kubernetes Overview","text":"<p>This is how a very simple kubernetes deployment is setup, this is ver basic and does not include any advanced features like autoscaling, monitoring, logging, etc.</p> <pre><code>graph TD;\n  X[Internet Browser] --&gt;|HTTPS| ALB[AWS Application Load balancer] --&gt; C[Pomerium Ingress] --&gt;|Authorization| Y(IDP OpenID Connect);\n  C --&gt;|Authenticated| B[Service];\n  B --&gt;|TCP/80| A[Deployment Replicas: 3];\n  A --&gt;|TCP/80| G1[Container Replica];\n  A --&gt;|TCP/80| G2[Container Replica];\n  A --&gt;|TCP/80| G3[Container Replica];\n  D[External-DNS] --&gt; C;\n  E[Cert-Manager] --&gt; C;\n  F[Pomerium] --&gt; C;\n  RAM[Request ram: 128Mi&lt;br&gt;Limit ram: 512Mi] --&gt; G1;\n  CPU[Request cpu: 100m] --&gt; G1;</code></pre>"},{"location":"systems/kubernetes/#all-the-yaml","title":"All the yaml","text":"<p>Here you can see all the yaml files that are needed to deploy the above setup.</p> NamespaceDeploymentServiceIngress <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: handbook\n</code></pre> <pre><code>---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: handbook\n  namespace: handbook\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: handbook\n  strategy:\n    type: RollingUpdate\n    maxSurge: 1\n    maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        app: handbook\n    spec:\n      containers:\n        - name: handbook\n          image: registry.domain.tld/handbook:tag\n          ports:\n            - containerPort: 80\n          env:\n            - name: PORT\n              value: \"80\"\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              memory: 512Mi\n          redinessProbe:\n            httpGet:\n              path: /\n              port: 80\n            initialDelaySeconds: 10\n            periodSeconds: 10\n          livenessProbe:\n            httpGet:\n              path: /\n              port: 80\n            initialDelaySeconds: 10\n            periodSeconds: 10\n</code></pre> <pre><code>---\napiVersion: v1\nkind: Service\nmetadata:\n  name: handbook\n  namespace: handbook\nspec:\n  selector:\n    app: handbook\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: ClusterIP\n</code></pre> <pre><code>---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: handbook-ingress\n  namespace: handbook\n  annotations:\n    cert-manager.io/cluster-issuer: zerossl-prod\n    external-dns.alpha.kubernetes.io/hostname: handbook.domain.tld\n    ingress.pomerium.io/allowed_domains: |\n      - postnord.com\n    ingress.pomerium.io/pass_identity_headers: \"false\"\nspec:\n  ingressClassName: pomerium\n  tls:\n    - hosts:\n        - handbook.domain.tld\n      secretName: handbook-tls\n  rules:\n  - host: handbook.domain.tld\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: handbook\n            port:\n              number: 80\n</code></pre>"}]}